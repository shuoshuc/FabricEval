# A TE solution for toy2 network.
# The original ToR-to-ToR demand is as follows:
# toy2-c1-ab1-s1i1 -> toy2-c3-ab1-s1i2: 70G
# toy2-c1-ab1-s1i1 -> toy2-c3-ab1-s1i3: 80G
# toy2-c3-ab1-s1i1 -> toy2-c1-ab1-s1i1: 100G

# TE intent for c1->c3
te_intents {
  target_block: "toy2-c1-ab1"
  # Demand c1->172.16.1.32/27: 70G.
  # Traffic is split 2-way following shortest path: 30G and 40G.
  prefix_intents {
	  dst_prefix: "172.16.1.32"
    mask: 27
	  nexthop_entries {
		  nexthop_port: "toy2-c1-ab1-s3i1-p4"
		  weight: 0.428571
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c1-ab1-s3i2-p4"
		  weight: 0.571429
		}
	}
  # Demand c1->172.16.1.64/27: 80G.
  # Traffic is split 4-way: 30G/30G on shortest path and 10G/10G on 2-hop path.
  prefix_intents {
	  dst_prefix: "172.16.1.64"
    mask: 27
	  nexthop_entries {
		  nexthop_port: "toy2-c1-ab1-s3i1-p3"
		  weight: 0.125
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c1-ab1-s3i1-p4"
		  weight: 0.375
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c1-ab1-s3i2-p3"
		  weight: 0.125
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c1-ab1-s3i2-p4"
		  weight: 0.375
		}
	}
}
# TE intent for c3->c1
te_intents {
  target_block: "toy2-c3-ab1"
  # Demand c3->172.16.0.0/27: 100G.
  # Traffic is split 4-way equally: 25G each nexthop port.
  prefix_intents {
	  dst_prefix: "172.16.0.0"
    mask: 27
	  nexthop_entries {
		  nexthop_port: "toy2-c3-ab1-s3i1-p3"
		  weight: 0.25
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c3-ab1-s3i1-p4"
		  weight: 0.25
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c3-ab1-s3i2-p3"
		  weight: 0.25
		}
	  nexthop_entries {
		  nexthop_port: "toy2-c3-ab1-s3i2-p4"
		  weight: 0.25
		}
	}
}
